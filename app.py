import streamlit as st
import pandas as pd
import pickle
import lzma
from sklearn.preprocessing import LabelEncoder
import traceback
import os
from datetime import datetime
import numpy as np
from PIL import Image

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="ANVISA - Sistema de Fiscaliza√ß√£o de Produtos",
    page_icon="üõ°Ô∏è",
    layout="wide"
)

def header_anvisa(): # Adiciona o cabe√ßalho com informa√ß√µes do governo
    st.markdown("""
    <style>
        .gov-header {
            background-color: #006341; /* Verde ANVISA */
            padding: 0.5rem 1rem;
            color: white;
            font-family: 'Arial', sans-serif;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        }
        .gov-logo {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        .gov-title {
            font-size: 1.8rem;
            font-weight: 700;
            margin: 0;
        }
        .gov-subtitle {
            font-size: 1rem;
            margin: 0;
            opacity: 0.9;
        }
        .gov-brasil {
            background-color: #072b57; /* Azul governo */
            padding: 0.3rem;
            font-size: 0.9rem;
            display: flex;
            justify-content: center;
            gap: 20px;
        }
    </style>

    <div class="gov-brasil">
        <span>üåê brasil.gov.br</span>
        <span>üõ°Ô∏è Minist√©rio da Sa√∫de</span>
        <span>üáßüá∑ Governo Federal</span>
    </div>
    """, unsafe_allow_html=True)
header_anvisa()

# Fun√ß√£o para verificar arquivos 
def check_files():
    required_files = [
        'data/le_categoria.pkl', 
        'data/le_empresa.pkl',
        'data/le_produto.pkl',
        'data/le_target.pkl',
        'data/modelo_final.pkl.xz',
        'data/produtos_classificados.csv'
    ]
    missing = [f for f in required_files if not os.path.exists(f)]
    if missing:
        st.error(f"Arquivos faltando: {', '.join(missing)}")
        return False
    return True

# Fun√ß√£o para carregar LabelEncoders
def load_label_encoder(filepath):
    try:
        with open(filepath, 'rb') as f:
            obj = pickle.load(f)
            
            # Caso 1: J√° √© um LabelEncoder
            if isinstance(obj, LabelEncoder):
                return obj
                
            # Caso 2: √â um array numpy com as classes
            encoder = LabelEncoder()
            encoder.classes_ = obj
            return encoder
            
    except Exception as e:
        st.error(f"Erro ao carregar {filepath}: {str(e)}") 
        traceback.print_exc()
        return None

# Carregar todos os dados
@st.cache_resource
def load_data():
    if not check_files():
        return None
        
    try:
        # Carregar encoders
        le_categoria = load_label_encoder('data/le_categoria.pkl')
        le_empresa = load_label_encoder('data/le_empresa.pkl')
        le_produto = load_label_encoder('data/le_produto.pkl')
        le_target = load_label_encoder('data/le_target.pkl')
        
        # Verificar se todos os encoders foram carregados
        if None in [le_categoria, le_empresa, le_produto, le_target]:
            return None
            
        # Carregar modelo
        with lzma.open('data/modelo_final.pkl.xz', 'rb') as f:
            modelo = pickle.load(f)
            
        # Carregar dados
        produtos_df = pd.read_csv('data/produtos_classificados.csv', sep=',')
        
        return {
            'le_categoria': le_categoria,
            'le_empresa': le_empresa,
            'le_produto': le_produto,
            'le_target': le_target,
            'modelo': modelo,
            'produtos_df': produtos_df
        }
        
    except Exception as e:
        st.error(f"Erro fatal ao carregar dados: {str(e)}")
        traceback.print_exc()
        return None
    

data = load_data()

# Fun√ß√£o para adicionar logo e estilo
def add_logo():
    st.markdown(
        """
        <style>
            header {visibility: hidden;}
            .css-18e3th9 {padding-top: 0rem;}
            
            /* Cores da ANVISA */
            :root {
                --anvisa-green: #006341;
                --anvisa-light-green: #e1f0e8;
                --anvisa-blue: #005b8c;
            }
            
            .stButton>button {
                background-color: var(--anvisa-green);
                color: white;
                border-radius: 8px;
                padding: 0.5rem 1rem;
                border: none;
            }
            
            .stButton>button:hover {
                background-color: var(--anvisa-blue);
                color: white;
            }
            
            .css-1aumxhk {
                background-color: var(--anvisa-light-green);
                border-radius: 10px;
                padding: 20px;
            }
            
            .css-1v0mbdj {
                border-radius: 10px;
            }
            
            .tab {
                font-size: 18px;
                font-weight: bold;
            }
            
            h1 {
                color: var(--anvisa-green);
                border-bottom: 2px solid var(--anvisa-green);
                padding-bottom: 10px;
            }
            
            h2 {
                color: var(--anvisa-blue);
            }
        </style>
        """,
        unsafe_allow_html=True
    )
    
    # Logo ANVISA
    st.markdown(
        """
        <div style="display: flex; align-items: center; margin-bottom: 20px;">
            <h1 style="color: #006341; margin: 0; padding: 0;">ANVISA</h1>
            <p style="margin-left: 10px; color: #555; font-style: italic;">Sistema de Fiscaliza√ß√£o de Produtos</p>
        </div>
        """,
        unsafe_allow_html=True
    )

# Fun√ß√£o para fazer previs√µes
def predict_product(categoria, produto, empresa):
    try:
        # Buscar informa√ß√µes do produto no dataframe
        product_info = data['produtos_df'][
            (data['produtos_df']['DS_CATEGORIA_PRODUTO'] == categoria) & 
            (data['produtos_df']['NO_PRODUTO'] == produto) & 
            (data['produtos_df']['NO_RAZAO_SOCIAL_EMPRESA'] == empresa)
        ].iloc[0]

        # Aplicar a l√≥gica de classifica√ß√£o manualmente
        situacao = product_info['ST_SITUACAO_REGISTRO']
        vencimento = pd.to_datetime(product_info['DT_VENCIMENTO_REGISTRO'])
        dias_para_vencer = (vencimento - pd.to_datetime('today')).days

        if situacao == 'INATIVO':
            classificacao = 'INATIVO'
        elif situacao == 'ATIVO':
            if dias_para_vencer < 0:
                classificacao = 'VENCIDO'
            elif 0 <= dias_para_vencer <= 180:
                classificacao = 'PERTO DO VENCIMENTO'
            else:
                classificacao = 'ATIVO'
        else:
            classificacao = 'INDEFINIDO'

        return {
            'classificacao': classificacao, 
            'validade': product_info['DT_VENCIMENTO_REGISTRO'],
            'empresa': product_info['NO_RAZAO_SOCIAL_EMPRESA'],
            'registro': product_info['NU_REGISTRO_PRODUTO']
        }
    except Exception as e:
        st.error(f"Erro ao fazer previs√£o: {str(e)}")
        return None

# P√°gina principal
def main():
    add_logo()
    
    if data is None:
        st.error("""
        **Falha cr√≠tica no carregamento de dados.**
        
        Por favor, verifique:
        1. Todos os arquivos necess√°rios est√£o na pasta
        2. Os arquivos .pkl n√£o est√£o corrompidos
        3. O arquivo CSV est√° no formato correto
        
        Arquivos necess√°rios:
        - le_categoria.pkl, le_empresa.pkl, le_produto.pkl, le_target.pkl
        - modelo_final.pkl.xz
        - produtos_classificados.csv
        """)
        return
    
    tab1, tab2 = st.tabs(["Conhe√ßa o Projeto", "Consulta de Produtos"])
    
    with tab1:
        st.header("üìä Sobre a Base")
    
            # Container com estat√≠sticas
        st.markdown("""
            <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 15px; margin-bottom: 30px;">
                <div style="background: #006341; border-radius: 10px; padding: 15px; text-align: center; box-shadow: 0 4px 6px rgba(0,0,0,0.05);">
                    <h3 style="color: #e1f0e8; margin: 0;">‚úÖ Ativos</h3>
                    <p style="font-size: 24px; font-weight: bold; margin: 5px 0;">36%</p>
                </div>
                <div style="background: #d4a017; border-radius: 10px; padding: 15px; text-align: center; box-shadow: 0 4px 6px rgba(0,0,0,0.05);">
                    <h3 style="color: #fff8e6; margin: 0;">‚è≥ Perto do Venc.</h3>
                    <p style="font-size: 24px; font-weight: bold; margin: 5px 0;">2%</p>
                </div>
                <div style="background: #d32f2f; border-radius: 10px; padding: 15px; text-align: center; box-shadow: 0 4px 6px rgba(0,0,0,0.05);">
                    <h3 style="color: #ffebee; margin: 0;">‚ùå Vencidos</h3>
                    <p style="font-size: 24px; font-weight: bold; margin: 5px 0;">9,5%</p>
                </div>
                <div style="background: #616161; border-radius: 10px; padding: 15px; text-align: center; box-shadow: 0 4px 6px rgba(0,0,0,0.05);">
                    <h3 style="color: #f5f5f5; margin: 0;">üîí Inativos</h3>
                    <p style="font-size: 24px; font-weight: bold; margin: 5px 0;">52,5%</p>
                </div>
            </div>
            """, unsafe_allow_html=True)

            # Se√ß√£o "Objetivo do Projeto" 
        with st.expander("üéØ **Objetivo do Projeto**", expanded=True):
                st.markdown("""
                Este sistema foi desenvolvido para fiscais da ANVISA, objetivando auxiliar na classifica√ß√£o de produtos regulamentados, 
                agilizando o processo de fiscaliza√ß√£o utilizando apenas alguns cliques, garantindo maior consist√™ncia nas informa√ß√µes e na 
                tomada de decis√£o. Na classifica√ß√£o os produtos s√£o divididos em **4 categorias**:
                
                - **‚úÖ ATIVO**: Produto dentro do prazo de validade e sem restri√ß√µes.
                - **‚è≥ PERTO DO VENCIMENTO**: Validade expira em at√© 180 dias.
                - **‚ùå VENCIDO**: Data de validade ultrapassada.
                - **üîí INATIVO**: Registro cancelado ou suspenso pela ANVISA.
                
                Os cards acima mostram a porcentagem de produtos em cada categoria, com base nos dados dispon√≠veis.
                """)
                
                st.markdown("""
                ### Base Legal
                Segundo a **NIT/Dicla-035**, norma que define os princ√≠pios das Boas Pr√°ticas de Laborat√≥rio (BPL), √© obrigat√≥ria a rotulagem de produtos qu√≠micos, reagentes e solu√ß√µes, contendo informa√ß√µes como:
                
                - Identidade do produto
                - Orienta√ß√µes de armazenamento
                - Prazo de validade *(INMETRO, 2011)*
                            
                Conforme a RDC n¬∫ 157/2002 da ANVISA, produtos com registro vencido ou irregular 
                devem ser imediatamente retirados do mercado.
                
                > *"O prazo de validade corresponde ao per√≠odo em que o produto permanece adequado para uso, tamb√©m denominado vida √∫til, sendo determinado com base em estudos de estabilidade espec√≠ficos"* **(BRASIL, 2002)**.
                """)

            # Se√ß√£o do Modelo
        with st.expander("üìà **Sobre o Modelo**"):
                col1, col2, col3 = st.columns(3)
                with col2:
                    st.markdown("""
                    <div style='background-color: #006341; padding: 20px; border-radius: 10px; text-align: center; box-shadow: 0 4px 8px rgba(0,0,0,0.1)'>
                        <h3 style='color: white; margin: 0;'>Acur√°cia do Modelo</h3>
                        <p style='font-size: 32px; font-weight: bold; color: white; margin: 10px 0;'>97.43%</p>
                        <p style='color: #e1f0e8; margin: 0;'>Taxa de classifica√ß√£o correta</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                st.markdown("---")
                
                # An√°lise
                st.subheader("üìå An√°lise da Resultados")
                st.markdown("""
                Foram testados cinco modelos de aprendizagem supervisionada, utilizando valida√ß√£o cruzada com 10 folds. 
                As m√©tricas de avalia√ß√£o inclu√≠ram acur√°cia m√©dia, desvio padr√£o e matriz de confus√£o.
                            
                Ap√≥s se mostrar o modelo com melhor desempenho, o Random Forest foi escolhido como benchmark (modelo principal), por apresentar o melhor equil√≠brio entre desempenho geral (acur√°cia de 61,0%), 
                robustez em ambientes com ru√≠dos e capacidade de interpretar vari√°veis categ√≥ricas complexas.
                Al√©m disso, o modelo foi excelente na realiza√ß√£o de um novo treinamento com 
                o conjunto de dados completo e balanceado, atingindo os seguintes valores na matriz de confus√£o, dando destaque para:
                            
                """)
                st.markdown("""
                
                - **Alta precis√£o em classificar registros INATIVOS** (98% de acertos) e ATIVOS (97% de acertos)
                - **Bom reconhecimento de produtos VENCIDOS** (98% de recall), crucial para fiscaliza√ß√£o
                - **Desafio com a classe minorit√°ria (PERTO DO VENCIMENTO)**:
                    - Apesar do alto recall (97%), a precis√£o foi menor (68%)
                    - Isso indica que o modelo √†s vezes classifica outros casos como "Perto do Vencimento" erroneamente
                - **Principais erros**: Confus√£o entre:
                    - INATIVO classificado como VENCIDO (216 casos)
                    - ATIVO classificado como VENCIDO (156 casos)
                """)
                
                # Tabela de M√©tricas
                st.subheader("üìà M√©tricas Detalhadas por Classe")
                
                metrics_df = pd.DataFrame({
                    'Classe': ['ATIVO', 'INATIVO', 'PERTO DO VENCIMENTO', 'VENCIDO'],
                    'Precis√£o': [0.99, 1.00, 0.68, 0.90],
                    'Recall': [0.97, 0.98, 0.97, 0.98],
                    'F1-Score': [0.98, 0.99, 0.80, 0.94],
                    'Exemplos': [10569, 15367, 559, 2796]
                })
                
                # Formata√ß√£o condicional para destacar valores baixos
                def color_low(val):
                    color = 'red' if val < 0.7 else 'green' if val > 0.9 else 'orange'
                    return f'color: {color}; font-weight: bold'
                
                styled_df = metrics_df.style.applymap(color_low, subset=['Precis√£o', 'Recall', 'F1-Score'])
                
                st.dataframe(
                    styled_df.format({
                        'Precis√£o': '{:.2%}',
                        'Recall': '{:.2%}',
                        'F1-Score': '{:.2%}'
                    }),
                    hide_index=True,
                    use_container_width=True
                )
                
                # Explica√ß√£o complementar
        with st.expander("‚ÑπÔ∏è Como interpretar estas m√©tricas?"):
                st.markdown("""
                    - **Precis√£o**: De todos que o modelo classificou como X, quantos realmente eram X?
                        - *Exemplo: 68% dos classificados como "Perto do Vencimento" estavam corretos*
                    - **Recall**: De todos os casos reais de X, quantos o modelo identificou?
                        - *Exemplo: 97% dos produtos realmente perto do vencimento foram detectados*
                    - **F1-Score**: M√©dia harm√¥nica entre Precis√£o e Recall (quanto maior, melhor)
                    """)
            
            # Se√ß√£o de Limita√ß√µes
        with st.expander("‚ö†Ô∏è **Limita√ß√µes e Recomenda√ß√µes**"):
                st.warning("""
                - Recomenda-se **atualiza√ß√£o trimestral** do modelo com novos dados de fiscaliza√ß√£o.
                - Incorporar vari√°veis adicionais, como hist√≥rico de fiscaliza√ß√£o ou reclama√ß√µes de consumidores, para enriquecimento do modelo.
                - Explorar t√©cnicas avan√ßadas de ensemble, como Gradient Boosting, para potencializar o desempenho.
                - Implementar o modelo em sistemas de monitoramento automatizado para auxiliar √≥rg√£os reguladores e empresas do setor.
                - Considerar a implementa√ß√£o de um sistema de feedback cont√≠nuo, onde os usu√°rios possam reportar erros ou inconsist√™ncias nas previs√µes, permitindo ajustes e melhorias no modelo ao longo do tempo.
                """)


    with tab2:
        st.header("üîç Sistema de Fiscaliza√ß√£o Automatizada ANVISA")
        
        col1, col2 = st.columns(2)
        
        with col1:
            try:
                # Verificar se os dados foram carregados corretamente
                if data is None:
                    st.error("Dados n√£o carregados corretamente. Verifique os arquivos necess√°rios.")
                    return
                
                # Sele√ß√£o da categoria
                categoria = st.selectbox(
                    "Selecione a Categoria do Produto",
                    options=data['le_categoria'].classes_,
                    index=0
                )

                # Filtrar produtos baseado na categoria selecionada
                produtos_filtrados = data['produtos_df'][
                    data['produtos_df']['DS_CATEGORIA_PRODUTO'] == categoria
                ]['NO_PRODUTO'].unique()

                # Sele√ß√£o do produto
                produto = st.selectbox(
                    "Selecione o Produto",
                    options=produtos_filtrados,
                    index=0
                )

                # Filtrar empresas baseado no produto selecionado
                empresas_filtradas = data['produtos_df'][
                    (data['produtos_df']['DS_CATEGORIA_PRODUTO'] == categoria) &
                    (data['produtos_df']['NO_PRODUTO'] == produto)
                ]['NO_RAZAO_SOCIAL_EMPRESA'].unique()

                # Sele√ß√£o da empresa
                empresa = st.selectbox(
                    "Selecione a Empresa",
                    options=empresas_filtradas,
                    index=0
                )

                if st.button("Consultar Produto"):
                    with st.spinner("Processando consulta..."):
                        resultado = predict_product(categoria, produto, empresa)  
                
                        if len(empresas_filtradas) == 0:
                            st.warning("Nenhuma empresa encontrada para este produto/categoria.")
                            return
                                        
                        if resultado:
                            # Mensagens condicionais baseadas na classifica√ß√£o
                            if resultado['classificacao'] == "PERTO DO VENCIMENTO":
                                st.warning("‚ö†Ô∏è **Aten√ß√£o:** Produto perto do vencimento. A√ß√£o recomendada em 180 dias conforme RDC 157/2002.")
                            elif resultado['classificacao'] == "ATIVO":
                                st.success("‚úÖ Classifica√ß√£o confirmada conforme legisla√ß√£o ANVISA.")
                            elif resultado['classificacao'] == "VENCIDO":
                                st.error("‚ùå **Produto vencido:** Retirada imediata do mercado exigida pela legisla√ß√£o.")
                            elif resultado['classificacao'] == "INATIVO":
                                st.info("‚ÑπÔ∏è **Registro inativo:** Verificar motivo da inativa√ß√£o no sistema ANVISA.")
                            st.session_state['mostrar_formulario'] = True  # Ativa flag na sess√£o

                            # Exibir resultados em cards
                            st.markdown("### Resultado da Consulta")
                                    
                            col_res1, col_res2 = st.columns(2)
                            
                            with col_res1:
                                st.markdown(
                                    f"""
                                    <div style='background-color: #006341; padding: 15px; border-radius: 10px; margin-bottom: 10px;'>
                                        <h4 style='color: #e1f0e8; margin-top: 0;'>Classifica√ß√£o</h4>
                                        <p style='font-size: 18px;'>{resultado['classificacao']}</p>
                                    </div>
                                    """,
                                    unsafe_allow_html=True
                                )
                                
                                st.markdown(
                                    f"""
                                    <div style='background-color: #006341; padding: 15px; border-radius: 10px; margin-bottom: 10px;'>
                                        <h4 style='color: #e1f0e8; margin-top: 0;'>Empresa Respons√°vel</h4>
                                        <p style='font-size: 18px;'>{resultado['empresa']}</p>
                                    </div>
                                    """,
                                    unsafe_allow_html=True
                                )
                            
                            with col_res2:
                                st.markdown(
                                    f"""
                                    <div style='background-color:  #006341; padding: 15px; border-radius: 10px; margin-bottom: 10px;'>
                                        <h4 style='color: #e1f0e8; margin-top: 0;'>Data de Validade</h4>
                                        <p style='font-size: 18px;'>{resultado['validade']}</p>
                                    </div>
                                    """,
                                    unsafe_allow_html=True
                                )
                                
                                st.markdown(
                                    f"""
                                    <div style='background-color: #006341; padding: 15px; border-radius: 10px; margin-bottom: 10px;'>
                                        <h4 style='color: #e1f0e8; margin-top: 0;'>N√∫mero de Registro</h4>
                                        <p style='font-size: 18px;'>{resultado['registro']}</p>
                                    </div>
                                    """,
                                    unsafe_allow_html=True
                                )
                                
                                # Formul√°rio INDEPENDENTE para report de erro
                            if st.session_state.get('mostrar_formulario', False):
                                with st.form(key='feedback_form'):
                                    st.subheader("‚úèÔ∏è Reportar Erro")
                                    erro = st.text_area("Use est√° se√ß√£o apenas em caso de identifica√ß√£o de erro na classifica√ß√£o. Descreva detalhadamente o problema encontrado:")
                                    
                                    if st.form_submit_button("Enviar Relat√≥rio"):
                                        if erro.strip():
                                            # Salvar feedback
                                            feedback = {
                                                'data': datetime.now().strftime("%Y-%m-%d %H:%M"),
                                                'produto': produto,
                                                'empresa': empresa,
                                                'erro': erro
                                            }
                                            pd.DataFrame([feedback]).to_csv(
                                                "feedbacks.csv",
                                                mode='a',
                                                header=not os.path.exists("feedbacks.csv"),
                                                index=False
                                            )
                                            st.success("‚úÖ Relat√≥rio enviado √† equipe ANVISA!")
                                            st.session_state['mostrar_formulario'] = False  # Fecha formul√°rio
                                        else:
                                            st.warning("Por favor, descreva o erro encontrado.")
                                st.markdown("""
                                <style>
                                    div[data-testid="stForm"] {
                                        border: 1px solid #006341;
                                        border-radius: 10px;
                                        padding: 20px;
                                    }
                                </style>
                                """, unsafe_allow_html=True)
            except Exception as e:
                st.error(f"Erro ao carregar op√ß√µes de consulta: {str(e)}")
                traceback.print_exc()
                            
        with col2:
            st.markdown("### Informa√ß√µes Adicionais")
            st.markdown("""
            Este sistema utiliza intelig√™ncia artificial para classificar produtos regulamentados em quatro categorias cr√≠ticas:

            - ‚úÖ ATIVO - Registros v√°lidos e dentro do prazo
            - ‚ö†Ô∏è PERTO DO VENCIMENTO - Validade expira em at√© 180 dias
            - ‚ùå VENCIDO - Registros com prazo expirado
            - üîí INATIVO - Registros cancelados ou suspensos
                        
            Como funciona:
            - Selecione categoria, produto e empresa
            - Obtenha a classifica√ß√£o regulat√≥ria instant√¢nea
            - Acesse informa√ß√µes completas sobre validade e status
            
            *Baseado no modelo de Machine Learning com 97.43% de acur√°cia, conforme Portaria ANVISA n¬∫ 157/2002*
            """)
            
            st.markdown("""
            **D√∫vidas?** Entre em contato com a equipe de TI da ANVISA:
            - Email: ti@anvisa.gov.br
            - Telefone: (61) 3462-5400
            """)
            # RODAP√â
            st.markdown("""
            <style>
            /* Evita conflito com abas */
            .stApp [data-testid="stVerticalBlock"] {
                position: relative;
                padding-bottom: 50px !important; /* Espa√ßo para o rodap√© */
            }
            
            .footer {
                position: fixed;
                bottom: 0;
                left: 0;
                width: 100%;
                background-color: #006341;
                color: white;
                text-align: center;
                padding: 8px 0;
                font-size: 0.85rem;
                z-index: 999;
                border-top: 1px solid #e1f0e8;
            }
            
            .footer-content {
                max-width: 800px;
                margin: 0 auto;
                display: flex;
                justify-content: center;
                gap: 15px;
                flex-wrap: wrap;
            }
            </style>
            
            <div class="footer">
                <div class="footer-content">
                    <span>Projeto por: <strong>L√≠via Fernandes da Rocha</strong></span>
                    <span>|</span>
                    <a href="mailto:livia.fernandes@academico.ufpb.br" style="color: #d4a017 !important;">livia.fernandes@academico.ufpb.br</a>
                </div>
            </div>
            """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
